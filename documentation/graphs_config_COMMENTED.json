{
    // (Mandatory) Very mandatory. Define a list of graphs configuration. The graphs are identified by their ids. Those ids must match the ones used in submissions_rules. 
    // - Those configuration contains at least a type field. The rest of the config are optional and chart type dependant.
    //   Type values: "polar" | "bar" | "doughnut" | "radar"
    "charts": {
        "doughnut#0": {
            "type": "radar",
            // color (Optional): the color as string used to draw the chart (default: #6FC5BC)
            "color": "#6FC5BC"
        },
        "doughnut_chart#1": {
            "type": "doughnut",
            // colors (Optional): the array of colors as string used to draw the chart (default: ["#CBA0A1","#8C9CB0","#D3E0C9","#F1D7AC","#EEEDF7"])
            "colors": [
                "#CBA0A1",
                "#8C9CB0",
                "#D3E0C9",
                "#F1D7AC",
                "#EEEDF7"
            ]
        },
        "polar_area_chart#2": {
            "type": "polar",
            // colors (Optional): the array of colors as string used to draw the chart (default: ["#6FC5BC","#1B657C","#4595AD","#F1D7AC","#EEEDF7"])
            "colors": [
                "#6FC5BC",
                "#1B657C",
                "#4595AD",
                "#F1D7AC",
                "#EEEDF7"
            ]
        },
        "age_pyramid#3": {
            "type": "bar",
            // "barType" (Optional): can be "single" | "duo". By that udnerstgand the direction of the x axis. (default: "duo")
            //    - single: a single value bar chart
            //    - duo: a double valud bar charts, structured as an age pyramid (mirrored in its center)
            "barType": "duo",
            // direction (Optional): can be "horizontal" | "vertical". By that udnerstgand the direction of the x axis (default: "vertical")
            "direction": "vertical",
            "axis": {
                "x": {
                    // "title" (mandatory)): two values, x and y: title of the axis. It can be a string or a TKLabel
                    "title": "charts.titleX",
                    // min, max, interval (Optional): management of the min max interval
                    "min": -100,
                    "max": 100,
                    "interval": 50
                },
                "y": {
                    // "title" (mandatory)): two values, x and y: title of the axis. It can be a string or a TKLabel
                    "title": "charts.titleY",
                    // (Mandatory): labels for the axis that represents the value. Its an array of TKLabel example: [
                    //     {
                    //         "fr": "balba",
                    //         "en": "azeadz"
                    //     }
                    // ]
                    "labels": [
                        {
                            "fr": "60+"
                        },
                        {
                            "fr": "18-59"
                        },
                        {
                            "fr": "12-17"
                        },
                        {
                            "fr": "5-11"
                        },
                        {
                            "fr": "0-4"
                        }
                    ]
                }
            },
            // "series" (Optional): series represented in the chart. It has to match the series as described in the submissions rules. And the type of chart. 
            // chart single --> only one serie
            // chart single --> only two series
            // a serie is {
            //     "id": "m", --> as declared in the submissions rules 
            //     "index": 0, --> index of the serie (for duo: 0 is left, and 1 is right)
            //     "color": "#6FC5BC", --> color used to represent this serie
            //     "label": "charts.male" --> string or TKLabel. If string, key in the locale file. IF TKlabel, it's like: { "fr": "balba", "en": "azeadz" }
            // }
            // "Default is as follow"
            "series": [
                {
                    "id": "m",
                    "index": 0,
                    "color": "#6FC5BC",
                    "label": "charts.male"
                },
                {
                    "id": "f",
                    "index": 1,
                    "color": "#1B657C",
                    "label": "charts.female"
                }
            ],
            // "mapping" (Optional): allows for a mapping between string and number value (like Few=1, Much=2), etc.
            // It's a record of object with 
            // key (possible result of the field) => {
            //   value: number (desired value in the dataset)
            //   label: TKLabel --> it's like: { "fr": "balba", "en": "azeadz" }
            // }
            "mapping": {
                "none_almost_no_households": {
                    "value": 1,
                    "label": {
                        "fr": "Aucune"
                    }
                },
                "few_households": {
                    "value": 2,
                    "label": {
                        "fr": "Un peu"
                    }
                }
                // etc.
            }
        }
    }